%ol.breadcrumb
  %li 监控中心
  %li 设备列表
  %li= Time.now.strftime("%y-%m-%d %H:%M:%S")

:css   
  .devices th:nth-child(n+1), .devices td:nth-child(n+1) { text-align: center; width: 5%; }
  .devices th:nth-child(1), .devices td:nth-child(1) { width: 2%; }
  .devices th:nth-child(2), .devices td:nth-child(2) { text-align: left;width: 7%; }
  .devices th:nth-child(3), .devices td:nth-child(3) { text-align: left;width: 10%; }
  .devices th:nth-child(4), .devices td:nth-child(4) { width: 5%; }
  .devices th:nth-child(5), .devices td:nth-child(5) { width: 5%; }
  .devices th:nth-child(6), .devices td:nth-child(6) { width: 5%; }
  .devices th:nth-child(7), .devices td:nth-child(7) { width: 5%; }
  .devices th:nth-child(8), .devices td:nth-child(8) { width: 5%; }
  .devices th:nth-child(9), .devices td:nth-child(9) { width: 5%; }
  .devices th:nth-child(10), .devices td:nth-child(10) { width: 5%; }
  .devices th:nth-child(11), .devices td:nth-child(11) { width: 5%; }
  .devices th:nth-last-child(1), .devices td:nth-child(1) { width: 8%; }
%table.table.table-hover.table-condensed.table-strip.table-bordered.smart-table.devices#devices
  %thead
    %th.more -
    %th.more 组名
    %th 主机
    %th 状态
    %th 系统
    %th 内存
    %th.more %
    %th CPU
    %th.more %
    %th 磁盘
    %th.more %
    %th 更新时间
  %tbody
    - @records.each_with_index do |record, index|
      - record_hash = record.latest_record
      - device_group = record.device_group
      - order_index = (device_group ? device_group.order_index : 0) * 1000 + record.order_index
      %tr{id: "dom_#{record.id}", "data-order" => order_index}
        %td.more= index+1
        %td.more= device_group.name if device_group
        %td.name= record.human_name || record.hostname
        %td
          - interval = (Time.now.to_i - record.updated_at.to_i) < 600
          %span.label{class: "#{interval ? 'label-success' : 'label-danger'}"}
            = interval ? '正常' : '异常'
        %td.text-muted= "#{record.os_type}#{record.os_version}"
        %td.text-muted= record.memory.split(/\s+/)[0]
        %td.more
          %a{onclick: "window.Device.showMemoryModal(this);", "data-title" => "内存明细", "data-content" => record_hash[:memory_usage_description]}
            = record_hash[:memory_usage] + "%"
        %td.text-muted= record.cpu
        %td.more
          %a{onclick: "window.Device.showCPUModal(this);", "data-title" => "CPU明细", "data-content" => record_hash[:cpu_usage_description]}
            = record_hash[:cpu_usage]
        %td.text-muted= record.disk.split(/\s+/)[0]
        %td.more
          %a{onclick: "window.Device.showDiskModal(this);", "data-title" => "磁盘明细", "data-content" => record_hash[:disk_usage_description]}
            = record_hash[:disk_usage]
        %td= record_hash[:created_at].first(14)

#deviceModal.modal.fade{"aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-dialog{:role => "document"}
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} ×
        %h4.modal-title 日志模板
      .modal-body{style: "max-height:490px;overflow:scroll;padding:15px;"}
        loading...

:javascript
  $(".navbar").addClass("hidden");
  setInterval(function() { window.location.reload(); }, 60000);

  var userAgent = navigator.userAgent,
    isAndroid = userAgent.indexOf('Android') > -1 || userAgent.indexOf('Adr') > -1,
    isiOS = !!userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
  if(isAndroid || isiOS || window.innerWidth < 800) {
    $(".more").addClass("hidden");
    $(".container").css({"padding-left": "0px", "padding-right": "0px"});
  }

  // sort devices with group order index and device order index
  var $trs = $('#devices tbody tr');
  $trs.sort(function(a, b){
    var valveNumOfa = $(a).data("order");
    var valveNumOfb = $(b).data("order");
    if(parseInt(valveNumOfa) < parseInt(valveNumOfb)) 
      return -1;
    else 
      return 1;
  });
  $trs.detach().appendTo('#devices tbody');
  $('#devices tbody tr').each(function(inx, el, arr) {
    $(el).find("td:eq(0)").html(inx + 1);
  })

  window.Device = {
    humanSize: function(num) {
      var humanText = num;

      try {
        num = parseInt(num);

        if(num > 1024) {
          humanText = (num/1024).toFixed(0) + "G " + (num % 1024) + "M"
        } else {
          humanText = num + "M"
        }
      } catch(e) {
        console.log(e);
      }
      return humanText;
    },
    showMemoryModal: function(ctl) {
      $("#deviceModal").modal('show');
      $("#deviceModal .modal-title").html($(ctl).data("title"));
      
      try {
        $("#deviceModal .modal-body").html("<table class='table table-bordered table-condensed'></table>");
        var hash = $(ctl).data("content"), key;
        for(key in hash) {
          $("#deviceModal .modal-body table").append("<tr><td style='width:30%;'>" + key + "</td><td>" + window.Device.humanSize(hash[key]) + "</td><tr>")
        }
      } catch(e) {
        $("#deviceModal .modal-body").html(JSON.stringify($(ctl).data("content")));
      }
    },
    showCPUModal: function(ctl) {
      $("#deviceModal").modal('show');
      $("#deviceModal .modal-title").html($(ctl).data("title"));
      
      try {
        $("#deviceModal .modal-body").html("<table class='table table-bordered table-condensed'></table>");
        var hash = $(ctl).data("content"), key;
        for(key in hash) {
          $("#deviceModal .modal-body table").append("<tr><td style='width:30%;'>" + key + "</td><td>" + hash[key] + "</td><tr>")
        }
      } catch(e) {
        $("#deviceModal .modal-body").html(JSON.stringify($(ctl).data("content")));
      }
    },
    showDiskModal: function(ctl) {
      $("#deviceModal").modal('show');
      $("#deviceModal .modal-title").html($(ctl).data("title"));
      
      try {
        $("#deviceModal .modal-body").html("<table class='table table-bordered table-condensed'></table>");
        var array = $(ctl).data("content"), hash, key, pairs, headers = [];
        for(var i = 0, len = array.length; i < len; i ++) {
          hash = array[i];
          pairs = [];
          for(key in hash) {
            pairs.push("<td>" + hash[key] + "</td>")
            headers.push("<td style='font-weight: bold;'>" + key + "</td>")
          }
          if(i == 0) {
            $("#deviceModal .modal-body table").append("<tr>" + headers.join("") + "<tr>")
          }
          $("#deviceModal .modal-body table").append("<tr>" + pairs.join("") + "<tr>")
        }
      } catch(e) {
        console.log(e);
        $("#deviceModal .modal-body").html(JSON.stringify($(ctl).data("content")));
      }
    }
  }